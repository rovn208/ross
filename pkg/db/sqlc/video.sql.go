// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: video.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVideo = `-- name: CreateVideo :one
INSERT INTO videos (
    title,
    stream_url,
    description,
    thumbnail_url,
    created_by
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, title, stream_url, description, thumbnail_url, created_by, created_at, updated_at
`

type CreateVideoParams struct {
	Title        string      `json:"title"`
	StreamUrl    string      `json:"stream_url"`
	Description  pgtype.Text `json:"description"`
	ThumbnailUrl pgtype.Text `json:"thumbnail_url"`
	CreatedBy    int64       `json:"created_by"`
}

func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) (Video, error) {
	row := q.db.QueryRow(ctx, createVideo,
		arg.Title,
		arg.StreamUrl,
		arg.Description,
		arg.ThumbnailUrl,
		arg.CreatedBy,
	)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.StreamUrl,
		&i.Description,
		&i.ThumbnailUrl,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteVideo = `-- name: DeleteVideo :exec
DELETE FROM videos
WHERE id = $1
`

func (q *Queries) DeleteVideo(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteVideo, id)
	return err
}

const getListVideo = `-- name: GetListVideo :many
SELECT id, title, stream_url, description, thumbnail_url, created_by, created_at, updated_at FROM videos
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type GetListVideoParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetListVideo(ctx context.Context, arg GetListVideoParams) ([]Video, error) {
	rows, err := q.db.Query(ctx, getListVideo, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Video{}
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.StreamUrl,
			&i.Description,
			&i.ThumbnailUrl,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideo = `-- name: GetVideo :one
SELECT id, title, stream_url, description, thumbnail_url, created_by, created_at, updated_at FROM videos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetVideo(ctx context.Context, id int64) (Video, error) {
	row := q.db.QueryRow(ctx, getVideo, id)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.StreamUrl,
		&i.Description,
		&i.ThumbnailUrl,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateVideo = `-- name: UpdateVideo :one
UPDATE videos
SET
    title = COALESCE($1, title),
    stream_url = COALESCE($2, stream_url),
    description = COALESCE($3, description),
    thumbnail_url = COALESCE($4, thumbnail_url)
WHERE
    id = $5
RETURNING id, title, stream_url, description, thumbnail_url, created_by, created_at, updated_at
`

type UpdateVideoParams struct {
	Title        pgtype.Text `json:"title"`
	StreamUrl    pgtype.Text `json:"stream_url"`
	Description  pgtype.Text `json:"description"`
	ThumbnailUrl pgtype.Text `json:"thumbnail_url"`
	ID           int64       `json:"id"`
}

func (q *Queries) UpdateVideo(ctx context.Context, arg UpdateVideoParams) (Video, error) {
	row := q.db.QueryRow(ctx, updateVideo,
		arg.Title,
		arg.StreamUrl,
		arg.Description,
		arg.ThumbnailUrl,
		arg.ID,
	)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.StreamUrl,
		&i.Description,
		&i.ThumbnailUrl,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
