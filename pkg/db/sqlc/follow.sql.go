// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: follow.sql

package db

import (
	"context"
)

const followUser = `-- name: FollowUser :one
INSERT INTO follows (
    followed_user_id,
    following_user_id
) VALUES (
    $1, $2
) RETURNING following_user_id, followed_user_id, created_at, updated_at
`

type FollowUserParams struct {
	FollowedUserID  int64 `json:"followed_user_id"`
	FollowingUserID int64 `json:"following_user_id"`
}

func (q *Queries) FollowUser(ctx context.Context, arg FollowUserParams) (Follow, error) {
	row := q.db.QueryRow(ctx, followUser, arg.FollowedUserID, arg.FollowingUserID)
	var i Follow
	err := row.Scan(
		&i.FollowingUserID,
		&i.FollowedUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getListFollower = `-- name: GetListFollower :many
SELECT following_user_id, followed_user_id, created_at, updated_at FROM follows
WHERE following_user_id = $1
LIMIT $2
OFFSET $3
`

type GetListFollowerParams struct {
	FollowingUserID int64 `json:"following_user_id"`
	Limit           int32 `json:"limit"`
	Offset          int32 `json:"offset"`
}

func (q *Queries) GetListFollower(ctx context.Context, arg GetListFollowerParams) ([]Follow, error) {
	rows, err := q.db.Query(ctx, getListFollower, arg.FollowingUserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Follow{}
	for rows.Next() {
		var i Follow
		if err := rows.Scan(
			&i.FollowingUserID,
			&i.FollowedUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListFollowing = `-- name: GetListFollowing :many
SELECT following_user_id, followed_user_id, created_at, updated_at FROM follows
WHERE followed_user_id = $1
LIMIT $2
OFFSET $3
`

type GetListFollowingParams struct {
	FollowedUserID int64 `json:"followed_user_id"`
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
}

func (q *Queries) GetListFollowing(ctx context.Context, arg GetListFollowingParams) ([]Follow, error) {
	rows, err := q.db.Query(ctx, getListFollowing, arg.FollowedUserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Follow{}
	for rows.Next() {
		var i Follow
		if err := rows.Scan(
			&i.FollowingUserID,
			&i.FollowedUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowUser = `-- name: UnfollowUser :exec
DELETE FROM follows
WHERE followed_user_id = $1 AND following_user_id = $2
`

type UnfollowUserParams struct {
	FollowedUserID  int64 `json:"followed_user_id"`
	FollowingUserID int64 `json:"following_user_id"`
}

func (q *Queries) UnfollowUser(ctx context.Context, arg UnfollowUserParams) error {
	_, err := q.db.Exec(ctx, unfollowUser, arg.FollowedUserID, arg.FollowingUserID)
	return err
}
